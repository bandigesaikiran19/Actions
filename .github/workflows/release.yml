name: Semantic Versioning

on:
  push:
    branches:
      - main

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get last commit message
        id: commit_message
        run: echo "$(git log --format=%B -n 1 HEAD)" >> commit_message.txt

      - name: Determine version bump
        id: version_bump
        run: |
          COMMIT_MESSAGE=$(cat commit_message.txt)
          if [[ "$COMMIT_MESSAGE" =~ ^feat ]]; then
            echo "minor" >> version_bump.txt
          elif [[ "$COMMIT_MESSAGE" =~ ^fix ]]; then
            echo "patch" >> version_bump.txt
          elif [[ "$COMMIT_MESSAGE" =~ ^perf ]]; then
            echo "patch" >> version_bump.txt
          elif [[ "$COMMIT_MESSAGE" =~ ^docs ]]; then
            echo "patch" >> version_bump.txt
          elif [[ "$COMMIT_MESSAGE" =~ ^style ]]; then
            echo "patch" >> version_bump.txt
          elif [[ "$COMMIT_MESSAGE" =~ ^refactor ]]; then
            echo "patch" >> version_bump.txt
          elif [[ "$COMMIT_MESSAGE" =~ ^test ]]; then
            echo "patch" >> version_bump.txt
          elif [[ "$COMMIT_MESSAGE" =~ ^build ]]; then
            echo "patch" >> version_bump.txt
          elif [[ "$COMMIT_MESSAGE" =~ ^ci ]]; then
            echo "patch" >> version_bump.txt
          elif [[ "$COMMIT_MESSAGE" =~ ^chore ]]; then
            echo "patch" >> version_bump.txt
          else
            echo "none" >> version_bump.txt
          fi

      - name: Read version bump
        id: read_version_bump
        run: |
          VERSION_BUMP=$(cat version_bump.txt)
          echo "VERSION_BUMP=${VERSION_BUMP//$'\n'/ }" >> $GITHUB_ENV

      - name: Bump version
        id: version
        uses: anothrNick/github-tag-action@v1
        with:
          entryPoint: tag
          args: --tag-prefix v --bump minor

      - name: Set output version
        run: echo "VERSION=${{ steps.version.outputs.new_tag }}" >> $GITHUB_ENV
